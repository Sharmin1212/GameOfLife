/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameoflife;

import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import javax.swing.Timer;
import java.awt.event.ActionListener;

/**
 *
 * @author alu20919409n
 */
public class Board extends javax.swing.JPanel implements ActionListener {

    private Universe universe;
    private Timer timer;
    private boolean paused;
    private int population;
    public int cycles;

    public boolean isPaused() {
        return paused;
    }

    /**
     * Creates new form Board
     */
    public Board() {
        initComponents();
        universe = new Universe();
        timer = new Timer(ConfigSingleton.getInstance().getDeltaTime(), this);
        paused = false;
        population = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(153, 255, 153));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        universe.paintSquare(evt.getPoint(), getWidth(), getHeight());
        repaint();
    }//GEN-LAST:event_formMouseClicked

    @Override
    public void actionPerformed(ActionEvent ae) {
        universe.tick();
        repaint();
        Toolkit.getDefaultToolkit().sync();
        cycles++;

    }

    public int getCycles() {
        return cycles;
    }

    public int getPopulation() {
        population = 0;
        boolean[][] matrix = universe.getMatrix();
        for (int i = 0; i < ConfigSingleton.getInstance().getNumRows(); i++) {
            for (int j = 0; j < ConfigSingleton.getInstance().getNumCols(); j++) {
                if (matrix[i][j] == true) {
                    population++;
                }
            }
        }
        return population;
    }

    public void initGame() {
        boolean[][] matrix = universe.getMatrix();
        population = 0;
        cycles = 0;
        for (int i = 0; i < ConfigSingleton.getInstance().getNumRows(); i++) {
            for (int j = 0; j < ConfigSingleton.getInstance().getNumCols(); j++) {
                matrix[i][j] = false;

            }
        }

        matrix[25][25] = true;
        matrix[26][25] = true;
        matrix[27][25] = true;
        matrix[28][25] = true;
        matrix[29][25] = true;
        matrix[25][29] = true;
        matrix[26][29] = true;
        matrix[27][29] = true;
        matrix[28][29] = true;
        matrix[29][29] = true;
        matrix[25][27] = true;
        matrix[29][27] = true;
        setFocusable(true);
        universe.setMatrix(matrix);
        timer.start();

    }

    @Override
    protected void paintComponent(Graphics g) {
        paintUniverse(g);
    }

    private void paintUniverse(Graphics g) {
        boolean[][] matrix = universe.getMatrix();
        for (int i = 0; i < ConfigSingleton.getInstance().getNumRows(); i++) {
            for (int j = 0; j < ConfigSingleton.getInstance().getNumCols(); j++) {
                Util.drawSquare(g, i, j, matrix[i][j], getSize().width / ConfigSingleton.getInstance().getNumCols(),
                        getSize().height / ConfigSingleton.getInstance().getNumRows());
            }
        }
    }

    public void ChangeDelay(int deltaTime) {
        timer.setDelay(deltaTime);
        timer.restart();
    }

    public void pause() {
        if (!paused) {
            timer.stop();
            paused = true;

        } else {
            timer.start();
            paused = false;
        }

    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
